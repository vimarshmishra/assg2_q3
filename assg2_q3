#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_WORDS 1000
#define MAX_WORD_LEN 100

typedef struct {
    char word[MAX_WORD_LEN];
    int count;
} WordFreq;

void toLowerCase(char *str) {
    for (int i = 0; str[i]; i++) {
        str[i] = tolower(str[i]);
    }
}

int findWordIndex(WordFreq wordFreqs[], int wordCount, char *word) {
    for (int i = 0; i < wordCount; i++) {
        if (strcmp(wordFreqs[i].word, word) == 0) {
            return i;
        }
    }
    return -1;
}

void addWord(WordFreq wordFreqs[], int *wordCount, char *word) {
    int index = findWordIndex(wordFreqs, *wordCount, word);
    if (index == -1) {
        strcpy(wordFreqs[*wordCount].word, word);
        wordFreqs[*wordCount].count = 1;
        (*wordCount)++;
    } else {
        wordFreqs[index].count++;
    }
}

void printFrequencies(WordFreq wordFreqs[], int wordCount) {
    printf("Word Frequencies:\n");
    for (int i = 0; i < wordCount; i++) {
        printf("%s: %d\n", wordFreqs[i].word, wordFreqs[i].count);
    }
}

int main() {
    char paragraph[10000];
    WordFreq wordFreqs[MAX_WORDS];
    int wordCount = 0;
    
    printf("Enter a paragraph: ");
    fgets(paragraph, sizeof(paragraph), stdin);
    
    char *token = strtok(paragraph, " ,.-\n");
    while (token != NULL) {
        toLowerCase(token);
        addWord(wordFreqs, &wordCount, token);
        token = strtok(NULL, " ,.-\n");
    }
    
    printFrequencies(wordFreqs, wordCount);
    
    return 0;
}
